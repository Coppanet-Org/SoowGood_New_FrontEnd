import{M as u}from"./chunk-FSNV7SJ3.js";import{$ as G,$a as V,Ba as yt,Ca as R,Cb as bt,Da as vt,Ga as Nt,Gb as X,Ha as T,Ib as It,La as gt,Ma as l,Na as x,O as mt,R as h,S as O,U as m,Ub as qt,Vb as xt,W as P,Wb as Y,X as b,Xa as N,Xb as Et,Y as B,Ya as g,Yb as wt,Z as ht,Za as C,Zb as J,_a as U,aa as w,ab as H,ba as D,bb as M,cc as Dt,d as z,ec as jt,fb as F,hb as S,ib as St,ja as E,jb as Tt,la as ut,nb as L,pa as dt,pb as W,q as nt,qb as Q,rb as Z,sb as K,ta as lt,tb as c,ub as Ct,v as pt,w as ct,wa as ft,ya as v,za as q}from"./chunk-TXQBTV46.js";import{a as s,b as rt,c as ot}from"./chunk-5G567QLT.js";function _(a){return a instanceof L}function $(a){return typeof a=="function"}function Ot(a){return typeof a=="string"}var kt=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["dynamic-view"]],inputs:{content:"content"},decls:1,vars:1,consts:[[3,"innerHTML"]],template:function(o,r){o&1&&C(0,"div",0),o&2&&l("innerHTML",r.content,dt)},encapsulation:2}),a})(),tt=class{constructor(i){this.args=i,this.wrapper=null,this.args.vcr?(this.viewRef=this.args.vcr.createEmbeddedView(this.args.tpl,this.args.context||{}),this.viewRef.detectChanges()):(this.viewRef=this.args.tpl.createEmbeddedView(this.args.context||{}),this.viewRef.detectChanges(),this.args.appRef.attachView(this.viewRef))}detectChanges(){this.viewRef.detectChanges()}getElement(){let i=this.viewRef.rootNodes;return i.length===1&&i[0]===Node.ELEMENT_NODE?this.element=i[0]:(this.element=document.createElement("div"),this.element.append(...i)),this.element}destroy(){this.viewRef.rootNodes[0]!==1&&(this.element?.parentNode.removeChild(this.element),this.element=null),this.args.vcr||this.args.appRef.detachView(this.viewRef),this.viewRef.destroy(),this.viewRef=null}},et=class{constructor(i){this.value=i}getElement(){return this.value}detectChanges(){}destroy(){}},it=class{constructor(i){if(this.options=i,i.vcr)this.compRef=i.vcr.createComponent(i.component,{index:i.vcr.length,injector:i.injector||i.vcr.injector});else{let o=i.resolver.resolveComponentFactory(i.component);this.compRef=o.create(i.injector),i.appRef.attachView(this.compRef.hostView)}}get ref(){return this.compRef}setInput(i,o){return this.compRef.instance[i]=o,this}setInputs(i){return Object.keys(i).forEach(o=>{this.compRef.instance[o]=i[o]}),this}detectChanges(){return this.compRef.hostView.detectChanges(),this}appendTo(i){return i.appendChild(this.getElement()),this}removeFrom(i){return i.removeChild(this.getElement()),this}getRawContent(){return this.getElement().outerHTML}getElement(){return this.compRef.location.nativeElement}destroy(){this.compRef.destroy(),!this.options.vcr&&this.options.appRef.detachView(this.compRef.hostView),this.compRef=null}},st=(()=>{class a{constructor(o,r,t){this.resolver=o,this.injector=r,this.appRef=t}createComponent(o,r={}){return new it({component:o,vcr:r.vcr,injector:r.injector||this.injector,appRef:this.appRef,resolver:this.resolver})}createTemplate(o,r={}){return new tt({vcr:r.vcr,appRef:this.appRef,tpl:o,context:r.context})}createView(o,r={}){if(_(o))return this.createTemplate(o,r);if($(o))return this.createComponent(o,r);if(Ot(o))return new et(o);throw"Type of content is not supported"}}return a.\u0275fac=function(o){return new(o||a)(m(lt),m(E),m(It))},a.\u0275prov=h({token:a,factory:a.\u0275fac,providedIn:"root"}),a})(),Pt=(()=>{class a{constructor(o,r,t){this.defaultTpl=o,this.vcr=r,this.viewService=t}ngOnInit(){this.resolveContentType()}ngOnChanges(o){o.view&&!o.view.isFirstChange()&&this.resolveContentType()}resolveContentType(){this.viewRef?.destroy(),Ot(this.view)?(this.viewRef=this.viewService.createComponent(kt,{vcr:this.vcr,injector:this.injector}),this.viewRef.setInput("content",this.view).detectChanges()):this.viewRef=this.viewService.createView(this.view||this.defaultTpl,{vcr:this.vcr,injector:this.injector??this.vcr.injector,context:this.context})}ngOnDestroy(){this.viewRef?.destroy()}}return a.\u0275fac=function(o){return new(o||a)(q(L),q(Nt),q(st))},a.\u0275dir=ht({type:a,selectors:[["","dynamicView",""]],inputs:{view:[P.None,"dynamicView","view"],injector:[P.None,"dynamicViewInjector","injector"],context:[P.None,"dynamicViewContext","context"]},features:[G]}),a})(),Bt=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275mod=B({type:a}),a.\u0275inj=O({}),a})();var Ut=["*"],Vt=(a,i)=>({"border-color":a,"border-right-color":i});function Ht(a,i){if(a&1&&(N(0,"div"),c(1,`
        `),C(2,"hot-toast-error",2),c(3,`
      `),g()),a&2){let o=S(3);v(2),l("theme",o.theme)}}function Mt(a,i){if(a&1&&(N(0,"div"),c(1,`
        `),C(2,"hot-toast-checkmark",2),c(3,`
      `),g()),a&2){let o=S(3);v(2),l("theme",o.theme)}}function Ft(a,i){if(a&1&&(N(0,"div"),c(1,`
        `),C(2,"hot-toast-warning",2),c(3,`
      `),g()),a&2){let o=S(3);v(2),l("theme",o.theme)}}function Wt(a,i){if(a&1&&(N(0,"div"),c(1,`
        `),C(2,"hot-toast-info",2),c(3,`
      `),g()),a&2){let o=S(3);v(2),l("theme",o.theme)}}function Qt(a,i){if(a&1&&(N(0,"div",4),c(1,`
    `),N(2,"div",5),c(3,`
      `),T(4,Ht,4,1,"div",6),c(5,`
      `),T(6,Mt,4,1,"div",6),c(7,`
      `),T(8,Ft,4,1,"div",6),c(9,`
      `),T(10,Wt,4,1,"div",6),c(11,`
    `),g(),c(12,`
  `),g()),a&2){let o=S(2);v(2),l("ngSwitch",o.type),v(2),l("ngSwitchCase","error"),v(2),l("ngSwitchCase","success"),v(2),l("ngSwitchCase","warning"),v(2),l("ngSwitchCase","info")}}function Zt(a,i){if(a&1&&(N(0,"div",1),c(1,`
  `),C(2,"hot-toast-loader",2),c(3,`
  `),T(4,Qt,13,5,"div",3),c(5,`
`),g()),a&2){let o=S();v(2),l("theme",o.theme),v(2),l("ngIf",o.type!=="loading")}}var Kt=["hotToastBarBase"];function Xt(a,i){if(a&1&&(U(0),c(1,`
          `),N(2,"hot-toast-animated-icon",10),c(3),g(),c(4,`
        `),V()),a&2){let o=S(2);v(2),l("iconTheme",o.toast.iconTheme),v(),Ct(o.toast.icon)}}function Yt(a,i){if(a&1&&(c(0,`
          `),N(1,"div"),c(2,`
            `),H(3,11),c(4,`
          `),g(),c(5,`
        `)),a&2){let o=S(2);v(3),l("dynamicView",o.toast.icon)}}function Jt(a,i){if(a&1&&(U(0),c(1,`
        `),T(2,Xt,5,2,"ng-container",4),c(3,`
        `),T(4,Yt,6,1,"ng-template",null,9,X),c(6,`
      `),V()),a&2){let o=K(5),r=S();v(2),l("ngIf",r.isIconString)("ngIfElse",o)}}function te(a,i){if(a&1&&(c(0,`
        `),C(1,"hot-toast-indicator",12),c(2,`
      `)),a&2){let o=S();v(),l("theme",o.toast.iconTheme)("type",o.toast.type)}}function ee(a,i){a&1&&H(0)}function ie(a,i){if(a&1){let o=M();N(0,"button",13),F("click",function(){w(o);let t=S();return D(t.close())}),g()}if(a&2){let o=S();l("ngStyle",o.toast.closeStyle)}}function se(a,i){if(a&1){let o=M();N(0,"hot-toast",3),F("height",function(t){let n=w(o).$implicit,p=S();return D(p.updateHeight(t,n))})("beforeClosed",function(){let e=w(o).$implicit,n=S();return D(n.beforeClosed(e))})("afterClosed",function(t){w(o);let e=S();return D(e.afterClosed(t))}),g()}if(a&2){let o=i.$implicit,r=i.index,t=S();l("toast",o)("offset",t.calculateOffset(o.id,o.position))("toastRef",t.toastRefs[r])}}var Gt={blank:4e3,error:4e3,success:4e3,loading:3e4,warning:4e3,info:4e3},Rt=800,ae=350,re=8,A=class{constructor(i){this.toast=i,this._onClosed=new z}get data(){return this.toast.data}set dispose(i){this._dispose=i}getToast(){return this.toast}appendTo(i){let{dispose:o,updateMessage:r,updateToast:t,afterClosed:e}=i.addToast(this);return this.dispose=o,this.updateMessage=r,this.updateToast=t,this.afterClosed=ct(this._onClosed.asObservable(),e),this}close(i={dismissedByAction:!1}){this._dispose(),this._onClosed.next({dismissedByAction:i.dismissedByAction,id:this.toast.id}),this._onClosed.complete()}},oe=(a,i)=>{a.style.animation=i},ne=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-animated-icon"]],inputs:{iconTheme:"iconTheme"},ngContentSelectors:Ut,decls:5,vars:2,consts:[[1,"hot-toast-animated-icon"]],template:function(o,r){o&1&&(St(),N(0,"div",0),c(1,`
  `),Tt(2),c(3,`
`),g(),c(4,`
`)),o&2&&x("color",r.iconTheme==null?null:r.iconTheme.primary)},encapsulation:2,changeDetection:0}),a})(),pe=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-checkmark"]],inputs:{theme:"theme"},decls:2,vars:4,consts:[[1,"hot-toast-checkmark-icon"]],template:function(o,r){o&1&&(C(0,"div",0),c(1,`
`)),o&2&&x("--check-primary",r.theme==null?null:r.theme.primary)("--check-secondary",r.theme==null?null:r.theme.secondary)},encapsulation:2,changeDetection:0}),a})(),ce=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-error"]],inputs:{theme:"theme"},decls:2,vars:4,consts:[[1,"hot-toast-error-icon"]],template:function(o,r){o&1&&(C(0,"div",0),c(1,`
`)),o&2&&x("--error-primary",r.theme==null?null:r.theme.primary)("--error-secondary",r.theme==null?null:r.theme.secondary)},encapsulation:2,changeDetection:0}),a})(),me=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-loader"]],inputs:{theme:"theme"},decls:2,vars:4,consts:[[1,"hot-toast-loader-icon",3,"ngStyle"]],template:function(o,r){o&1&&(C(0,"div",0),c(1,`
`)),o&2&&l("ngStyle",bt(1,Vt,r.theme==null?null:r.theme.primary,r.theme==null?null:r.theme.secondary))},dependencies:[J],encapsulation:2,changeDetection:0}),a})(),he=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-warning"]],inputs:{theme:"theme"},decls:2,vars:4,consts:[[1,"hot-toast-warning-icon"]],template:function(o,r){o&1&&(C(0,"div",0),c(1,`
`)),o&2&&x("--warn-primary",r.theme==null?null:r.theme.primary)("--warn-secondary",r.theme==null?null:r.theme.secondary)},encapsulation:2,changeDetection:0}),a})(),ue=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-info"]],inputs:{theme:"theme"},decls:2,vars:4,consts:[[1,"hot-toast-info-icon"]],template:function(o,r){o&1&&(C(0,"div",0),c(1,`
`)),o&2&&x("--warn-primary",r.theme==null?null:r.theme.primary)("--warn-secondary",r.theme==null?null:r.theme.secondary)},encapsulation:2,changeDetection:0}),a})(),de=(()=>{class a{}return a.\u0275fac=function(o){return new(o||a)},a.\u0275cmp=b({type:a,selectors:[["hot-toast-indicator"]],inputs:{theme:"theme",type:"type"},decls:2,vars:1,consts:[["class","hot-toast-indicator-wrapper",4,"ngIf"],[1,"hot-toast-indicator-wrapper"],[3,"theme"],["class","hot-toast-status-wrapper",4,"ngIf"],[1,"hot-toast-status-wrapper"],[3,"ngSwitch"],[4,"ngSwitchCase"]],template:function(o,r){o&1&&(T(0,Zt,6,2,"div",0),c(1,`
`)),o&2&&l("ngIf",r.type!=="blank")},dependencies:[Y,Et,wt,pe,ce,me,he,ue],encapsulation:2,changeDetection:0}),a})(),Lt=(()=>{class a{constructor(o,r,t){this.injector=o,this.renderer=r,this.ngZone=t,this.offset=0,this.height=new R,this.beforeClosed=new R,this.afterClosed=new R,this.isManualClose=!1,this.unlisteners=[]}get toastBarBaseHeight(){return this.toastBarBase.nativeElement.offsetHeight}get containerPositionStyle(){let o=this.toast.position.includes("top"),r=o?{top:0}:{bottom:0},t=this.toast.position.includes("left")?{left:0}:this.toast.position.includes("right")?{right:0}:{left:0,right:0,justifyContent:"center"};return s(s({transform:`translateY(${this.offset*(o?1:-1)}px)`},r),t)}get toastBarBaseStyles(){let o=this.toast.position.includes("top"),r=`hotToastEnterAnimation${o?"Negative":"Positive"} ${ae}ms cubic-bezier(0.21, 1.02, 0.73, 1) forwards`,t=`hotToastExitAnimation${o?"Negative":"Positive"} ${Rt}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1) ${this.toast.duration}ms`,e=this.toast.autoClose?`${r}, ${t}`:r;return rt(s({},this.toast.style),{animation:e})}get isIconString(){return typeof this.toast.icon=="string"}ngOnChanges(o){o.toast&&!o.toast.firstChange&&o.toast.currentValue?.message&&requestAnimationFrame(()=>{this.height.emit(this.toastBarBase.nativeElement.offsetHeight)})}ngOnInit(){_(this.toast.message)&&(this.context={$implicit:this.toastRef}),$(this.toast.message)&&(this.toastComponentInjector=E.create({providers:[{provide:A,useValue:this.toastRef}],parent:this.toast.injector||this.injector}))}ngAfterViewInit(){let o=this.toastBarBase.nativeElement;requestAnimationFrame(()=>{this.height.emit(o.offsetHeight)}),this.ngZone.runOutsideAngular(()=>{this.unlisteners.push(this.renderer.listen(o,"animationstart",r=>{this.isExitAnimation(r)&&this.ngZone.run(()=>this.beforeClosed.emit())}),this.renderer.listen(o,"animationend",r=>{this.isExitAnimation(r)&&this.ngZone.run(()=>this.afterClosed.emit({dismissedByAction:this.isManualClose,id:this.toast.id}))}))}),this.setToastAttributes()}close(){this.isManualClose=!0;let r=`hotToastExitAnimation${this.toast.position.includes("top")?"Negative":"Positive"} ${Rt}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1)`,t=this.toastBarBase.nativeElement;oe(t,r)}ngOnDestroy(){for(this.close();this.unlisteners.length;)this.unlisteners.pop()()}isExitAnimation(o){return o.animationName.includes("hotToastExitAnimation")}setToastAttributes(){let o=this.toast.attributes;for(let[r,t]of Object.entries(o))this.renderer.setAttribute(this.toastBarBase.nativeElement,r,t)}}return a.\u0275fac=function(o){return new(o||a)(q(E),q(ft),q(vt))},a.\u0275cmp=b({type:a,selectors:[["hot-toast"]],viewQuery:function(o,r){if(o&1&&W(Kt,5),o&2){let t;Q(t=Z())&&(r.toastBarBase=t.first)}},inputs:{toast:"toast",offset:"offset",defaultConfig:"defaultConfig",toastRef:"toastRef"},outputs:{height:"height",beforeClosed:"beforeClosed",afterClosed:"afterClosed"},features:[G],decls:25,vars:14,consts:[[1,"hot-toast-bar-base-container",3,"ngStyle","ngClass"],[1,"hot-toast-bar-base",3,"ngStyle","ngClass"],["hotToastBarBase",""],["aria-hidden","true",1,"hot-toast-icon"],[4,"ngIf","ngIfElse"],["indicator",""],[1,"hot-toast-message"],[4,"dynamicView","dynamicViewContext","dynamicViewInjector"],["type","button","class","hot-toast-close-btn","aria-label","Close",3,"ngStyle","click",4,"ngIf"],["iconTemplateOrComponent",""],[3,"iconTheme"],[3,"dynamicView"],[3,"theme","type"],["type","button","aria-label","Close",1,"hot-toast-close-btn",3,"ngStyle","click"]],template:function(o,r){if(o&1&&(N(0,"div",0),c(1,`
  `),N(2,"div",1,2),c(4,`
    `),N(5,"div",3),c(6,`
      `),T(7,Jt,7,2,"ng-container",4),c(8,`

      `),T(9,te,3,2,"ng-template",null,5,X),c(11,`
    `),g(),c(12,`

    `),N(13,"div",6),c(14,`
      `),N(15,"div"),c(16,`
        `),T(17,ee,1,0,"ng-container",7),c(18,`
      `),g(),c(19,`
    `),g(),c(20,`

    `),T(21,ie,1,1,"button",8),c(22,`
  `),g(),c(23,`
`),g(),c(24,`
`)),o&2){let t=K(10);l("ngStyle",r.containerPositionStyle)("ngClass","hot-toast-theme-"+r.toast.theme),v(2),x("--hot-toast-animation-state",r.isManualClose?"running":"paused"),l("ngStyle",r.toastBarBaseStyles)("ngClass",r.toast.className),gt("aria-live",r.toast.ariaLive)("role",r.toast.role),v(5),l("ngIf",r.toast.icon!==void 0)("ngIfElse",t),v(10),l("dynamicView",r.toast.message)("dynamicViewContext",r.context)("dynamicViewInjector",r.toastComponentInjector),v(4),l("ngIf",r.toast.dismissible)}},dependencies:[qt,Y,J,Pt,ne,de],encapsulation:2,changeDetection:0}),a})(),le=(()=>{class a{constructor(o){this.cdr=o,this.toasts=[],this.toastRefs=[],this._onClosed=new z,this.onClosed$=this._onClosed.asObservable()}trackById(o,r){return r.id}calculateOffset(o,r){let t=this.toasts.filter(p=>p.visible&&p.position===r),e=t.findIndex(p=>p.id===o);return e!==-1?t.slice(...this.defaultConfig.reverseOrder?[e+1]:[0,e]).reduce((p,d)=>p+(d.height||0)+re,0):0}updateHeight(o,r){r.height=o,this.cdr.detectChanges()}addToast(o){this.toastRefs.push(o);let r=o.getToast();return this.toasts.push(o.getToast()),this.cdr.detectChanges(),{dispose:()=>{this.closeToast(r.id)},updateMessage:t=>{r.message=t,this.updateToasts(r),this.cdr.detectChanges()},updateToast:t=>{this.updateToasts(r,t),this.cdr.detectChanges()},afterClosed:this.getAfterClosed(r)}}closeToast(o){if(o){let r=this.hotToastComponentList.find(t=>t.toast.id===o);r&&r.close()}else this.hotToastComponentList.forEach(r=>r.close())}beforeClosed(o){o.visible=!1}afterClosed(o){this.toasts.findIndex(t=>t.id===o.id)>-1&&(this._onClosed.next(o),this.toasts=this.toasts.filter(t=>t.id!==o.id),this.toastRefs=this.toastRefs.filter(t=>t.getToast().id!==o.id),this.cdr.detectChanges())}hasToast(o){return this.toasts.findIndex(r=>r.id===o)>-1}getAfterClosed(o){return this.onClosed$.pipe(pt(r=>r.id===o.id))}updateToasts(o,r){this.toasts=this.toasts.map(t=>s(s({},t),t.id===o.id&&s(s({},o),r)))}}return a.\u0275fac=function(o){return new(o||a)(q(yt))},a.\u0275cmp=b({type:a,selectors:[["hot-toast-container"]],viewQuery:function(o,r){if(o&1&&W(Lt,5),o&2){let t;Q(t=Z())&&(r.hotToastComponentList=t)}},inputs:{defaultConfig:"defaultConfig"},decls:8,vars:2,consts:[[2,"position","fixed","z-index","9999","top","0","right","0","bottom","0","left","0","pointer-events","none"],[2,"position","relative","height","100%"],[3,"toast","offset","toastRef","height","beforeClosed","afterClosed",4,"ngFor","ngForOf","ngForTrackBy"],[3,"toast","offset","toastRef","height","beforeClosed","afterClosed"]],template:function(o,r){o&1&&(N(0,"div",0),c(1,`
  `),N(2,"div",1),c(3,`
    `),T(4,se,1,3,"hot-toast",2),c(5,`
  `),g(),c(6,`
`),g(),c(7,`
`)),o&2&&(v(4),l("ngForOf",r.toasts)("ngForTrackBy",r.trackById))},dependencies:[xt,Lt],encapsulation:2,changeDetection:0}),a})(),j=class{constructor(){this.reverseOrder=!1,this.ariaLive="polite",this.role="status",this.position="top-center",this.autoClose=!0,this.theme="toast",this.attributes={},this.info={content:""},this.success={content:""},this.error={content:""},this.loading={content:""},this.blank={content:""},this.warning={content:""}}},fe=a=>typeof a=="function",ye=(a,i)=>fe(a)?a(i):a,at=class{constructor(){this.storage="local",this.key="ngneat/hototast-${id}",this.count=1,this.enabled=!1}},_t=(()=>{class a{constructor(o,r,t){this._viewService=o,this.platformId=r,this._isInitialized=!1,this._defaultConfig=new j,this._defaultPersistConfig=new at,t&&(this._defaultConfig=s(s({},this._defaultConfig),t))}get defaultConfig(){return this._defaultConfig}set defaultConfig(o){this._defaultConfig=s(s({},this._defaultConfig),o),this._componentRef&&this._componentRef.setInput("defaultConfig",this._defaultConfig)}show(o,r){return this.createToast(o||this._defaultConfig.blank.content,"blank",s(s({},this._defaultConfig),r))}error(o,r){return this.createToast(o||this._defaultConfig.error.content,"error",s(s(s({},this._defaultConfig),this._defaultConfig?.error),r))}success(o,r){return this.createToast(o||this._defaultConfig.success.content,"success",s(s(s({},this._defaultConfig),this._defaultConfig?.success),r))}loading(o,r){return this.createToast(o||this._defaultConfig.loading.content,"loading",s(s(s({},this._defaultConfig),this._defaultConfig?.loading),r))}warning(o,r){return this.createToast(o||this._defaultConfig.warning.content,"warning",s(s(s({},this._defaultConfig),this._defaultConfig?.warning),r))}info(o,r){return this.createToast(o||this._defaultConfig.info.content,"info",s(s(s({},this._defaultConfig),this._defaultConfig?.info),r))}observe(o){return r=>{let t,e=0,n=o.loading??this._defaultConfig.loading?.content,p=o.success??this._defaultConfig.success?.content,d=o.error??this._defaultConfig.error?.content;return nt(()=>(n&&(t=this.createLoadingToast(n),e=Date.now()),r.pipe(mt(s(s({},p&&{next:I=>{t=this.createOrUpdateToast(o,I,t,"success",e===0?e:Date.now()-e)}}),d&&{error:I=>{t=this.createOrUpdateToast(o,I,t,"error",e===0?e:Date.now()-e)}})))))}}close(o){this._componentRef&&this._componentRef.ref.instance.closeToast(o)}init(){jt(this.platformId)||(this._componentRef=this._viewService.createComponent(le).setInput("defaultConfig",this._defaultConfig).appendTo(document.body))}createOrUpdateToast(o,r,t,e,n){let p=null,d={};if({content:p,options:d}=this.getContentAndOptions(e,o[e]||(this._defaultConfig[e]?this._defaultConfig[e].content:"")),p=ye(p,r),t){t.updateMessage(p);let I=s(s({type:e,duration:n+Gt[e]},d),d.duration&&{duration:n+d.duration});t.updateToast(I)}else this.createToast(p,e,d);return t}createToast(o,r,t,e){this._isInitialized||(this._isInitialized=!0,this.init());let n=Date.now(),p=t?.id??n.toString();if(!this.isDuplicate(p)&&(!t.persist?.enabled||t.persist?.enabled&&this.handleStorageValue(p,t))){let d=s({ariaLive:t?.ariaLive??"polite",createdAt:n,duration:t?.duration??Gt[r],id:p,message:o,role:t?.role??"status",type:r,visible:!0,observableMessages:e??void 0},t);return new A(d).appendTo(this._componentRef.ref.instance)}}isDuplicate(o){return this._componentRef.ref.instance.hasToast(o)}handleStorageValue(o,r){let t=1,e=s(s({},this._defaultPersistConfig),r.persist),n=e.storage==="local"?localStorage:sessionStorage,p=e.key.replace(/\${id}/g,o),d=n.getItem(p);return d?(d=parseInt(d,10),d>0?t=d-1:t=d):t=e.count,n.setItem(p,t.toString()),t}getContentAndOptions(o,r){var n;let t,e=s(s({},this._defaultConfig),this._defaultConfig[o]);if(typeof r=="string"||_(r)||$(r))t=r;else{let p;n=r,{content:t}=n,p=ot(n,["content"]),e=s(s({},e),p)}return{content:t,options:e}}createLoadingToast(o){let r=null,t={};return{content:r,options:t}=this.getContentAndOptions("loading",o),this.loading(r,t)}}return a.\u0275fac=function(o){return new(o||a)(m(st),m(ut),m(j,8))},a.\u0275prov=h({token:a,factory:a.\u0275fac,providedIn:"root"}),a})(),ke=(()=>{class a{static forRoot(o){return{ngModule:a,providers:[{provide:j,useValue:o}]}}}return a.\u0275fac=function(o){return new(o||a)},a.\u0275mod=B({type:a}),a.\u0275inj=O({imports:[Dt,Bt]}),a})();var Ue=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/agent-master",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-master/${t}`},s({apiName:this.apiName},e)),this.getAllAgentMasterList=t=>this.restService.request({method:"GET",url:"/api/app/agent-master/agent-master-list"},s({apiName:this.apiName},t)),this.getByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/agent-master/by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/agent-master"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/agent-master",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Me=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/agent-profile",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-profile/${t}`},s({apiName:this.apiName},e)),this.getByUserId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-profile/by-user-id/${t}`},s({apiName:this.apiName},e)),this.getByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/agent-profile/by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/agent-profile"},s({apiName:this.apiName},t)),this.getListByMasterId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-profile/by-master-id/${t}`},s({apiName:this.apiName},e)),this.getListBySupervisorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-profile/by-supervisor-id/${t}`},s({apiName:this.apiName},e)),this.getlByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/agent-profile/l-by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/agent-profile",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Qe=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/agent-supervisor",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-supervisor/${t}`},s({apiName:this.apiName},e)),this.getAgentSupervisorsByAgentMasterList=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-supervisor/agent-supervisors-by-agent-master-list/${t}`},s({apiName:this.apiName},e)),this.getByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/agent-supervisor/by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/agent-supervisor"},s({apiName:this.apiName},t)),this.getListByMasterId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/agent-supervisor/by-master-id/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/agent-supervisor",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Xe=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.cancellAppointment=(t,e,n,p)=>this.restService.request({method:"POST",url:`/api/app/appointment/cancell-appointment/${t}`,params:{cancelByid:e,cancelByRole:n}},s({apiName:this.apiName},p)),this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/appointment",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/appointment/${t}`},s({apiName:this.apiName},e)),this.getAppCountByRealTimeConsultancy=(t,e)=>this.restService.request({method:"GET",url:"/api/app/appointment/app-count-by-real-time-consultancy",params:{aptDate:t}},s({apiName:this.apiName},e)),this.getAppCountByScheduleIdSessionId=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/appointment/app-count-by-schedule-id-session-id",params:{scheduleId:t,sessionId:e}},s({apiName:this.apiName},n)),this.getAppointmentCountForDoctorWithSearchFilter=(t,e,n)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-count-for-doctor-with-search-filter/${t}`,params:{name:e.name,consultancyType:e.consultancyType,specialityId:e.specialityId,specializationId:e.specializationId,appointmentStatus:e.appointmentStatus,fromDate:e.fromDate,toDate:e.toDate,isCurrentOnline:e.isCurrentOnline}},s({apiName:this.apiName},n)),this.getAppointmentCountForPatientWithSearchFilter=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-count-for-patient-with-search-filter/${t}`,params:{role:e,name:n.name,consultancyType:n.consultancyType,specialityId:n.specialityId,specializationId:n.specializationId,appointmentStatus:n.appointmentStatus,fromDate:n.fromDate,toDate:n.toDate,isCurrentOnline:n.isCurrentOnline}},s({apiName:this.apiName},p)),this.getAppointmentListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getAppointmentListByPatientId=(t,e,n)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-by-patient-id/${t}`,params:{role:e}},s({apiName:this.apiName},n)),this.getAppointmentListForDoctorWithSearchFilter=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-for-doctor-with-search-filter/${t}`,params:{name:e.name,consultancyType:e.consultancyType,specialityId:e.specialityId,specializationId:e.specializationId,appointmentStatus:e.appointmentStatus,fromDate:e.fromDate,toDate:e.toDate,isCurrentOnline:e.isCurrentOnline,offset:n.offset,limit:n.limit,pageNo:n.pageNo,pageSize:n.pageSize,sortBy:n.sortBy,sortOrder:n.sortOrder,isDesc:n.isDesc}},s({apiName:this.apiName},p)),this.getAppointmentListForPatientWithSearchFilter=(t,e,n,p,d)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-for-patient-with-search-filter/${t}`,params:{role:e,name:n.name,consultancyType:n.consultancyType,specialityId:n.specialityId,specializationId:n.specializationId,appointmentStatus:n.appointmentStatus,fromDate:n.fromDate,toDate:n.toDate,isCurrentOnline:n.isCurrentOnline,offset:p.offset,limit:p.limit,pageNo:p.pageNo,pageSize:p.pageSize,sortBy:p.sortBy,sortOrder:p.sortOrder,isDesc:p.isDesc}},s({apiName:this.apiName},d)),this.getAppointmentListWithSearchFilter=(t,e,n,p,d,I,k,$t,At)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-with-search-filter/${t}`,params:{name:e,consultancy:n,fromDate:p,toDate:d,aptStatus:I,skipValue:k,currentLimit:$t}},s({apiName:this.apiName},At)),this.getLeftBookingCountBySessionIdAndScheduleId=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/appointment/left-booking-count",params:{sessionId:t,scheduleId:e}},s({apiName:this.apiName},n)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/appointment"},s({apiName:this.apiName},t)),this.getListAppointmentListByAdmin=t=>this.restService.request({method:"GET",url:"/api/app/appointment/appointment-list-by-admin"},s({apiName:this.apiName},t)),this.getListAppointmentListByAdminWithFilter=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-by-admin-with-filter/${t}`,params:{role:e,name:n.name,consultancyType:n.consultancyType,specialityId:n.specialityId,specializationId:n.specializationId,appointmentStatus:n.appointmentStatus,fromDate:n.fromDate,toDate:n.toDate,isCurrentOnline:n.isCurrentOnline}},s({apiName:this.apiName},p)),this.getListAppointmentListByAgentMaster=(t,e)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-by-agent-master/${t}`},s({apiName:this.apiName},e)),this.getListAppointmentListByAgentSupervisor=(t,e)=>this.restService.request({method:"GET",url:`/api/app/appointment/appointment-list-by-agent-supervisor/${t}`},s({apiName:this.apiName},e)),this.getListOfSessionsWithWeekDayTimeSlotPatientCount=(t,e,n)=>this.restService.request({method:"GET",url:`/api/app/appointment/of-sessions-with-week-day-time-slot-patient-count/${t}`,params:{date:e}},s({apiName:this.apiName},n)),this.getPatientListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/appointment/patient-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getSearchedPatientListByDoctorId=(t,e,n)=>this.restService.request({method:"GET",url:`/api/app/appointment/searched-patient-list-by-doctor-id/${t}`,params:{name:e}},s({apiName:this.apiName},n)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/appointment",body:t},s({apiName:this.apiName},e)),this.updateAppointmentPaymentStatus=(t,e,n)=>this.restService.request({method:"PUT",url:`/api/app/appointment/appointment-payment-status/${e}`,params:{appCode:t}},s({apiName:this.apiName},n)),this.updateCallConsultationAppointment=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/appointment/call-consultation-appointment",params:{appCode:t}},s({apiName:this.apiName},e)),this.testAcTokenByInput=(t,e)=>this.restService.request({method:"POST",responseType:"text",url:"/api/app/appointment/test-ac-token",body:t},s({apiName:this.apiName},e)),this.testBuildTokenWithUIDByInput=(t,e)=>this.restService.request({method:"POST",responseType:"text",url:"/api/app/appointment/test-build-token-with-uID",body:t},s({apiName:this.apiName},e)),this.testBuildTokenWithUserAccountBy_appIdAnd_appCertificateAnd_channelNameAnd_account=(t,e,n,p,d)=>this.restService.request({method:"POST",responseType:"text",url:`/api/app/appointment/test-build-token-with-user-account/${t}`,params:{_appCertificate:e,_channelName:n,_account:p}},s({apiName:this.apiName},d))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var ti=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/common-disease/${t}`},s({apiName:this.apiName},e)),this.getDiseaseNameSearchList=(t,e)=>this.restService.request({method:"GET",url:"/api/app/common-disease/disease-name-search-list",params:{searchDisease:t}},s({apiName:this.apiName},e)),this.getDiseaseNameWithLimitList=t=>this.restService.request({method:"GET",url:"/api/app/common-disease/disease-name-with-limit-list"},s({apiName:this.apiName},t)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/common-disease"},s({apiName:this.apiName},t))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var si=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/degree",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/degree/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/degree"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/degree",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var oi=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-chamber",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-chamber/${t}`},s({apiName:this.apiName},e)),this.getDoctorChamberListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-chamber/doctor-chamber-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-chamber"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-chamber",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var ci=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-degree",body:t},s({apiName:this.apiName},e)),this.delete=(t,e)=>this.restService.request({method:"DELETE",url:`/api/app/doctor-degree/${t}`},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-degree/${t}`},s({apiName:this.apiName},e)),this.getDoctorDegreeListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-degree/doctor-degree-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-degree"},s({apiName:this.apiName},t)),this.getListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-degree/by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-degree",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var ui=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-fee-setup",body:t},s({apiName:this.apiName},e)),this.createFromMobileApp=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-fee-setup/from-mobile-app",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-fee-setup/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-fee-setup"},s({apiName:this.apiName},t)),this.getListByDoctorIdList=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-fee-setup/by-doctor-id-list/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-fee-setup",body:t},s({apiName:this.apiName},e)),this.updateFromMobileApp=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-fee-setup/from-mobile-app",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var fi=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-profile",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-profile/${t}`},s({apiName:this.apiName},e)),this.getAllDoctorsSearchList=(t,e,n,p,d)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctors-search-list",params:{name:t,consultType:e,speciality:n,specialization:p}},s({apiName:this.apiName},d)),this.getByUserId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-profile/by-user-id/${t}`},s({apiName:this.apiName},e)),this.getByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.getCurrentlyOnlineDoctorList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/currently-online-doctor-list"},s({apiName:this.apiName},t)),this.getDoctorDetailsByAdmin=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-profile/${t}/doctor-details-by-admin`},s({apiName:this.apiName},e)),this.getDoctorListFilter=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctor-list-filter",params:{name:t.name,consultancyType:t.consultancyType,specialityId:t.specialityId,specializationId:t.specializationId,appointmentStatus:t.appointmentStatus,fromDate:t.fromDate,toDate:t.toDate,isCurrentOnline:t.isCurrentOnline,offset:e.offset,limit:e.limit,pageNo:e.pageNo,pageSize:e.pageSize,sortBy:e.sortBy,sortOrder:e.sortOrder,isDesc:e.isDesc}},s({apiName:this.apiName},n)),this.getDoctorListSearchByName=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctor-list-search-by-name",params:{name:t,offset:e.offset,limit:e.limit,pageNo:e.pageNo,pageSize:e.pageSize,sortBy:e.sortBy,sortOrder:e.sortOrder,isDesc:e.isDesc}},s({apiName:this.apiName},n)),this.getDoctorListWithSearchFilter=(t,e,n,p,d,I,k)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctor-list-with-search-filter",params:{name:t,consultancy:e,speciality:n,specialization:p,skipValue:d,currentLimit:I}},s({apiName:this.apiName},k)),this.getDoctorsCountByFilters=(t,e)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctors-count-by-filters",params:{name:t.name,consultancyType:t.consultancyType,specialityId:t.specialityId,specializationId:t.specializationId,appointmentStatus:t.appointmentStatus,fromDate:t.fromDate,toDate:t.toDate,isCurrentOnline:t.isCurrentOnline}},s({apiName:this.apiName},e)),this.getDoctorsCountByName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctors-count-by-name",params:{name:t}},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-profile"},s({apiName:this.apiName},t)),this.getListDoctorListByAdmin=t=>this.restService.request({method:"GET",url:"/api/app/doctor-profile/doctor-list-by-admin"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-profile",body:t},s({apiName:this.apiName},e)),this.updateActiveStatusByAdminByIdAndActiveStatus=(t,e,n)=>this.restService.request({method:"PUT",url:`/api/app/doctor-profile/active-status-by-admin/${t}`,params:{activeStatus:e}},s({apiName:this.apiName},n)),this.updateDocotrProfile=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-profile/docotr-profile",body:t},s({apiName:this.apiName},e)),this.updateDoctorsOnlineStatusByIdAndOnlineStatus=(t,e,n)=>this.restService.request({method:"PUT",url:`/api/app/doctor-profile/doctors-online-status/${t}`,params:{onlineStatus:e}},s({apiName:this.apiName},n)),this.updateProfileStep=(t,e,n)=>this.restService.request({method:"PUT",url:`/api/app/doctor-profile/profile-step/${t}`,params:{step:e}},s({apiName:this.apiName},n))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ni=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-schedule",body:t},s({apiName:this.apiName},e)),this.createFromMobileApp=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-schedule/from-mobile-app",body:t},s({apiName:this.apiName},e)),this.deleteSession=(t,e)=>this.restService.request({method:"DELETE",url:`/api/app/doctor-schedule/${t}/session`},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-schedule/${t}`},s({apiName:this.apiName},e)),this.getDetailsScheduleListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-schedule/details-schedule-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-schedule"},s({apiName:this.apiName},t)),this.getListByDoctorIdList=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-schedule/by-doctor-id-list/${t}`},s({apiName:this.apiName},e)),this.getScheduleListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-schedule/schedule-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-schedule",body:t},s({apiName:this.apiName},e)),this.updateFromMobileApp=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-schedule/from-mobile-app",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ti=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/doctor-specialization",body:t},s({apiName:this.apiName},e)),this.delete=(t,e)=>this.restService.request({method:"DELETE",url:`/api/app/doctor-specialization/${t}`},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-specialization/${t}`},s({apiName:this.apiName},e)),this.getBySpecialityId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-specialization/by-speciality-id/${t}`},s({apiName:this.apiName},e)),this.getDoctorSpecializationListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-specialization/doctor-specialization-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getDoctorSpecializationListByDoctorIdSpecialityId=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/doctor-specialization/doctor-specialization-list-by-doctor-id-speciality-id",params:{doctorId:t,specialityId:e}},s({apiName:this.apiName},n)),this.getDoctorSpecializationListBySpecialityId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/doctor-specialization/doctor-specialization-list-by-speciality-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/doctor-specialization"},s({apiName:this.apiName},t)),this.getListByDoctorIdSpId=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/doctor-specialization/by-doctor-id-sp-id",params:{doctorId:t,specialityId:e}},s({apiName:this.apiName},n)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/doctor-specialization",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ii=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/documents-attachment",body:t},s({apiName:this.apiName},e)),this.delete=(t,e)=>this.restService.request({method:"DELETE",url:`/api/app/documents-attachment/${t}`},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/documents-attachment/${t}`},s({apiName:this.apiName},e)),this.getAttachmentInfoByEntityTypeAndEntityIdAndAttachmentType=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/documents-attachment/attachment-info/${e}`,params:{entityType:t,attachmentType:n}},s({apiName:this.apiName},p)),this.getDocumentInfoByEntityTypeAndEntityIdAndAttachmentType=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/documents-attachment/document-info/${e}`,params:{entityType:t,attachmentType:n}},s({apiName:this.apiName},p)),this.getList=(t,e)=>this.restService.request({method:"GET",url:"/api/app/documents-attachment",params:{sorting:t.sorting,skipCount:t.skipCount,maxResultCount:t.maxResultCount}},s({apiName:this.apiName},e)),this.update=(t,e,n)=>this.restService.request({method:"PUT",url:`/api/app/documents-attachment/${t}`,body:e},s({apiName:this.apiName},n))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ei=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/drug-rx/${t}`},s({apiName:this.apiName},e)),this.getDrugNameSearchList=(t,e)=>this.restService.request({method:"GET",url:"/api/app/drug-rx/drug-name-search-list",params:{searchDrug:t}},s({apiName:this.apiName},e)),this.getDrugWithLimitList=t=>this.restService.request({method:"GET",url:"/api/app/drug-rx/drug-with-limit-list"},s({apiName:this.apiName},t)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/drug-rx"},s({apiName:this.apiName},t))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var ji=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/financial-setup",body:t},s({apiName:this.apiName},e)),this.delete=(t,e)=>this.restService.request({method:"DELETE",url:`/api/app/financial-setup/${t}`},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/financial-setup/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/financial-setup"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/financial-setup",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Bi=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.applyOtpByClientKeyAndMobileNo=(t,e,n)=>this.restService.request({method:"POST",url:"/api/app/otp/apply-otp",params:{clientKey:t,mobileNo:e}},s({apiName:this.apiName},n)),this.isAgentExistByMobile=(t,e)=>this.restService.request({method:"POST",url:"/api/app/otp/is-agent-exist",params:{mobile:t}},s({apiName:this.apiName},e)),this.isDoctorExistByMobile=(t,e)=>this.restService.request({method:"POST",url:"/api/app/otp/is-doctor-exist",params:{mobile:t}},s({apiName:this.apiName},e)),this.isExistByMobile=(t,e)=>this.restService.request({method:"POST",url:"/api/app/otp/is-exist",params:{mobile:t}},s({apiName:this.apiName},e)),this.isPatientExistByMobile=(t,e)=>this.restService.request({method:"POST",url:"/api/app/otp/is-patient-exist",params:{mobile:t}},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/otp",body:t},s({apiName:this.apiName},e)),this.varifyOtp=(t,e)=>this.restService.request({method:"POST",url:"/api/app/otp/varify-otp",params:{otp:t}},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Li=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/patient-profile",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/${t}`},s({apiName:this.apiName},e)),this.getByPhoneAndCode=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/patient-profile/by-phone-and-code",params:{pCode:t,pPhone:e}},s({apiName:this.apiName},n)),this.getByUserId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/by-user-id/${t}`},s({apiName:this.apiName},e)),this.getByUserName=(t,e)=>this.restService.request({method:"GET",url:"/api/app/patient-profile/by-user-name",params:{userName:t}},s({apiName:this.apiName},e)),this.getDoctorListByCreatorIdFilter=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/doctor-list-by-creator-id-filter/${t}`,params:{name:e.name,consultancyType:e.consultancyType,specialityId:e.specialityId,specializationId:e.specializationId,appointmentStatus:e.appointmentStatus,fromDate:e.fromDate,toDate:e.toDate,isCurrentOnline:e.isCurrentOnline,offset:n.offset,limit:n.limit,pageNo:n.pageNo,pageSize:n.pageSize,sortBy:n.sortBy,sortOrder:n.sortOrder,isDesc:n.isDesc}},s({apiName:this.apiName},p)),this.getDoctorListFilter=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/patient-profile/doctor-list-filter",params:{name:t.name,consultancyType:t.consultancyType,specialityId:t.specialityId,specializationId:t.specializationId,appointmentStatus:t.appointmentStatus,fromDate:t.fromDate,toDate:t.toDate,isCurrentOnline:t.isCurrentOnline,offset:e.offset,limit:e.limit,pageNo:e.pageNo,pageSize:e.pageSize,sortBy:e.sortBy,sortOrder:e.sortOrder,isDesc:e.isDesc}},s({apiName:this.apiName},n)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/patient-profile"},s({apiName:this.apiName},t)),this.getListPatientListByAdmin=t=>this.restService.request({method:"GET",url:"/api/app/patient-profile/patient-list-by-admin"},s({apiName:this.apiName},t)),this.getListPatientListByAgentMaster=(t,e)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/patient-list-by-agent-master/${t}`},s({apiName:this.apiName},e)),this.getListPatientListByAgentSuperVisor=(t,e)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/patient-list-by-agent-super-visor/${t}`},s({apiName:this.apiName},e)),this.getPatientListBySearchUserProfileId=(t,e,n,p)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/patient-list-by-search-user-profile-id/${t}`,params:{role:e,name:n}},s({apiName:this.apiName},p)),this.getPatientListByUserProfileId=(t,e,n)=>this.restService.request({method:"GET",url:`/api/app/patient-profile/patient-list-by-user-profile-id/${t}`,params:{role:e}},s({apiName:this.apiName},n)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/patient-profile",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ai=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/prescription-master",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/prescription-master"},s({apiName:this.apiName},t)),this.getPatientDiseaseList=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/patient-disease-list/${t}`},s({apiName:this.apiName},e)),this.getPrescription=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/${t}/prescription`},s({apiName:this.apiName},e)),this.getPrescriptionByAppointmentId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/prescription-by-appointment-id/${t}`},s({apiName:this.apiName},e)),this.getPrescriptionCount=t=>this.restService.request({method:"GET",url:"/api/app/prescription-master/prescription-count"},s({apiName:this.apiName},t)),this.getPrescriptionListByAppointmentCreatorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/prescription-list-by-appointment-creator-id/${t}`},s({apiName:this.apiName},e)),this.getPrescriptionMasterListByDoctorId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/prescription-master-list-by-doctor-id/${t}`},s({apiName:this.apiName},e)),this.getPrescriptionMasterListByDoctorIdPatientId=(t,e,n)=>this.restService.request({method:"GET",url:"/api/app/prescription-master/prescription-master-list-by-doctor-id-patient-id",params:{doctorId:t,patientId:e}},s({apiName:this.apiName},n)),this.getPrescriptionMasterListByPatientId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/prescription-master/prescription-master-list-by-patient-id/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/prescription-master",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ui=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/speciality",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/speciality/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/speciality"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/speciality",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Mi=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/specialization",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/specialization/${t}`},s({apiName:this.apiName},e)),this.getBySpecialityId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/specialization/by-speciality-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/specialization"},s({apiName:this.apiName},t)),this.getListBySpecialtyId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/specialization/by-specialty-id/${t}`},s({apiName:this.apiName},e)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/specialization",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Qi=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.isUserExistsByUserName=(t,e)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/is-user-exists",params:{userName:t}},s({apiName:this.apiName},e)),this.loginByUserDto=(t,e)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/login",body:t},s({apiName:this.apiName},e)),this.refreshAccessTokenByUser=(t,e)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/refresh-access-token",body:t},s({apiName:this.apiName},e)),this.resetPasswordByInputDto=(t,e)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/reset-password",body:t},s({apiName:this.apiName},e)),this.resetPassword_AppByInputDto=(t,e)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/reset-password_App",body:t},s({apiName:this.apiName},e)),this.signupUserByUserDtoAndPasswordAndRole=(t,e,n,p)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/signup-user",params:{password:e,role:n},body:t},s({apiName:this.apiName},p)),this.userDataRemove=(t,e,n)=>this.restService.request({method:"POST",url:"/api/app/user-accounts/user-data-remove",params:{role:e},body:t},s({apiName:this.apiName},n))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ji=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.initiatePayment=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ek-pay/initiate-payment",body:t},s({apiName:this.apiName},e)),this.initiateTestPayment=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ek-pay/initiate-test-payment",body:t},s({apiName:this.apiName},e)),this.initiateTestRefund=t=>this.restService.request({method:"POST",url:"/api/app/ek-pay/initiate-test-refund"},s({apiName:this.apiName},t)),this.updateApplicantPaymentStatusByEkPayResponseDic=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/ek-pay/applicant-payment-status",body:t},s({apiName:this.apiName},e)),this.updateAppointmentPaymentStatus=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/ek-pay/appointment-payment-status",params:{appCode:t}},s({apiName:this.apiName},e)),this.updatePaymentHistoryByEkPayResponseDic=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/ek-pay/payment-history",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var is=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.create=(t,e)=>this.restService.request({method:"POST",url:"/api/app/payment-history",body:t},s({apiName:this.apiName},e)),this.get=(t,e)=>this.restService.request({method:"GET",url:`/api/app/payment-history/${t}`},s({apiName:this.apiName},e)),this.getByAppointmentCode=(t,e)=>this.restService.request({method:"GET",responseType:"text",url:"/api/app/payment-history/by-appointment-code",params:{appCode:t}},s({apiName:this.apiName},e)),this.getByTranId=(t,e)=>this.restService.request({method:"GET",url:`/api/app/payment-history/by-tran-id/${t}`},s({apiName:this.apiName},e)),this.getList=t=>this.restService.request({method:"GET",url:"/api/app/payment-history"},s({apiName:this.apiName},t)),this.update=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/payment-history",body:t},s({apiName:this.apiName},e)),this.updateHistory=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/payment-history/history",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var ds=(()=>{let i=class i{constructor(r){this.restService=r,this.apiName="Default",this.initPaymentHistoryFromMobileByInput=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/init-payment-history-from-mobile",body:t},s({apiName:this.apiName},e)),this.initiatePayment=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/initiate-payment",body:t},s({apiName:this.apiName},e)),this.initiateRefund=t=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/initiate-refund"},s({apiName:this.apiName},t)),this.initiateTestPayment=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/initiate-test-payment",body:t},s({apiName:this.apiName},e)),this.initiateTestRefund=t=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/initiate-test-refund"},s({apiName:this.apiName},t)),this.updateApplicantPaymentStatusBySslCommerzResponseDic=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/ssl-commerz/applicant-payment-status",body:t},s({apiName:this.apiName},e)),this.updateAppointmentPaymentStatus=(t,e,n)=>this.restService.request({method:"PUT",responseType:"text",url:"/api/app/ssl-commerz/appointment-payment-status",params:{appCode:t,sts:e}},s({apiName:this.apiName},n)),this.updatePaymentHistoryBySslCommerzResponseDic=(t,e)=>this.restService.request({method:"PUT",url:"/api/app/ssl-commerz/payment-history",body:t},s({apiName:this.apiName},e)),this.validateTestTransaction=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/validate-test-transaction",body:t},s({apiName:this.apiName},e)),this.validateTransaction=(t,e)=>this.restService.request({method:"POST",url:"/api/app/ssl-commerz/validate-transaction",body:t},s({apiName:this.apiName},e))}};i.\u0275fac=function(t){return new(t||i)(m(u))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();var Ks=(()=>{let i=class i{constructor(r){this.toasterService=r}customToast(r,t){return this.toasterService[t](r,this.getToastOptions(t))}getToastOptions(r){let t=this.getBackgroundColor(r),e=this.getTextColor(r),n=this.getIconColor(r);return{duration:3e3,style:{padding:"10px 16px",color:e,background:t},iconTheme:n}}getBackgroundColor(r){switch(r){case"success":return"rgb(0 171 7 / 100%)";case"error":return"rgb(255 0 0 / 100%) ";case"warning":return"rgb(255 179 68 / 100%)";default:return"#c2e0c6"}}getTextColor(r){switch(r){case"success":return"#f1f1f1";case"warning":return"#7a5600";case"error":return"#f1f1f1";default:return"#333"}}getIconColor(r){switch(r){case"success":return{primary:"#005539",secondary:"#f1f1f1"};case"error":return{primary:"#f44336",secondary:"#f1f1f1"};case"warning":return{primary:"#483500",secondary:"#f1f1f1"};default:return{primary:"#005539",secondary:"#f1f1f1"}}}};i.\u0275fac=function(t){return new(t||i)(m(_t))},i.\u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"});let a=i;return a})();export{ke as a,Ue as b,Me as c,Qe as d,Xe as e,ti as f,si as g,oi as h,ci as i,ui as j,fi as k,Ni as l,Ti as m,Ii as n,Ei as o,Ji as p,ji as q,Bi as r,Li as s,is as t,Ai as u,Ui as v,Mi as w,ds as x,Qi as y,Ks as z};
